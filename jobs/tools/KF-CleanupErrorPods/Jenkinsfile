@Library('sharedLib@main') _
def clusterNS

pipeline {
    agent any

    parameters {
        // choice(name: 'Deployment', choices: getDeploymentNames(env.JOB_NAME), description: 'Deployment Name')
        choice(name: 'clusterID', choices: ['1', '2', '3'], description: 'Cluster ID list; ignore for single cluster')
    }

    stages {
        stage('Set NS variable') {
            steps {
                script {
                    // Get the parent of the parent-folder of the job
                    clusterNS = env.JOB_NAME.split('/')[0]
                    env.clusterName = clusterNS.split('-')[0]
                    env.clusterNS = clusterNS.split('-')[1]
                }
                echo "NS variable is set to: ${clusterNS}"
                echo "Cluster variable is set to: ${clusterName}"
            }
        }
        stage('Clone KF Devops Tools') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'rammanokar_github', keyFileVariable: 'SSH_KEY')]) {
                    sh '''#!/usr/bin/env bash
                    export GIT_SSH_COMMAND="ssh -i $SSH_KEY"
                    rm -rf kf-devops-tools
                    git clone git@github.com:OrangeScape/kf-devops-tools.git
                    '''
                }
            }
        }
        stage('Restart Deployment') {
            steps {
                    // Activate the environment variables and generate the kubeconfig
                    sh """#!/usr/bin/env bash
                    cd kf-devops-tools/activateClusters/
                    source activate-${clusterName} ${params.clusterID}
                    kubens ${clusterNS}
                    kubectl get pods -A  | egrep 'Error|Terminated|Completed' | awk ' {print "kubectl -n",\$1,"delete pod",\$2}' | sh
                    """
                
            }
        }
    }
}