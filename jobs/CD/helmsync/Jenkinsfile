def clusterNS

pipeline {
    agent any

    stages {
        stage('Set NS variable') {
            steps {
                script {
                    // Get the parent of the parent-folder of the job
                    clusterNS = env.JOB_NAME.split('/')[0]
                    env.clusterNS = clusterNS
                }
                echo "NS variable is set to: ${clusterNS}"
            }
        }
        stage('Clone Chart') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'rammanokar_github', keyFileVariable: 'SSH_KEY')]) {
                    sh '''#!/usr/bin/env bash
                    export GIT_SSH_COMMAND="ssh -i $SSH_KEY"
                    rm -rf kf-configs
                    git clone git@github.com:OrangeScape/kf-configs.git
                    '''
                }
            }
        }
        stage('Deploy') {
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'rammanokar_github', keyFileVariable: 'SSH_KEY')]) {
                    sh """#!/usr/bin/env bash
                        export GIT_SSH_COMMAND="ssh -i $SSH_KEY"
                        cd kf-configs/
                        shopt -s expand_aliases
                        case $clusterNS in
                            "uat-uat") clusters=("uat-uat 1" "uat-uat 2" "uat-uat 3") ;;
                            "altair-altair") clusters=("altair-altair 1" "altair-altair 2" "altair-altair 3") ;;
                            "draco-draco") clusters=("draco-draco 1" "draco-draco 2" "draco-draco 3") ;;
                            *) clusters=($clusterNS) ;;
                        esac
                        for cluster in "\${clusters[@]}"; do
                            source activate  \$cluster
                            make charts 
                            cd \$CHART_DIR #tochart
                                ./bin/deploy/kf-service-ns-resources.sh
                            if [[ \$clusters == *"2"* || \$cluster == *"3"* ]]; then
                                echo "Skipping Cronjob helm deploy since it's cluster \$cluster"
                            else
                                ./bin/deploy/kf-cronjobs.sh
                            fi
                            ./bin/deploy/kf-service.sh
                            cd \$ROOT_DIR #toroot
                        done
                    """
                }
            }
        }
    }
}
