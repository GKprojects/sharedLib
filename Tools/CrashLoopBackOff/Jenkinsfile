def Namespace = ""
pipeline {
    agent any
    stages {
        stage('Activate Cluster') {
            steps {
                sh """#!/usr/bin/env bash
                echo "namespace is $Namespace"
                gcloud container clusters get-credentials $Namespace-gcp-gke-cluster-p001 --zone us-central1-b --project kf-dev-workload-p001
                mkdir -p "$HOME/.tmp/"
                export KUBECONFIG="$HOME/.tmp/$Namespace"
                echo "âœ… $Namespace cluster has been activated"
                """
            }
        }
        stage('Find CrashLoopBackOff Pods') {
            steps {
                sh "kubectl get pods -n $Namespace | grep 'CrashLoopBackOff' |  cut -d ' ' -f1 > pods.txt"
                script {
                    def podName = sh(
                        script: "kubectl get pods -n $Namespace | grep 'CrashLoopBackOff' ",
                        returnStdout: true
                    ).trim()
                    env.POD_NAME = podName
                }
            }
        }
        stage('Scale down Replicasets') {
            steps {
                script {
                    def podNames = readFile('pods.txt').split("\n")
                    podNames.each { podName ->
                        def rsName = sh(
                            script: "kubectl get pod $podName -n $Namespace -o jsonpath='{.metadata.ownerReferences[0].name}'",
                            returnStdout: true
                        ).trim()
                        def deploymentName = sh(
                            script: "kubectl get rs $rsName -n $Namespace -o jsonpath='{.metadata.ownerReferences[0].name}'",
                            returnStdout: true
                        ).trim()
                        sh "kubectl scale deployment $deploymentName --replicas=0 -n $Namespace"
                    }
                }
            }
        }
    }
}


def getFolderName() {
    try{
      def array = pwd().split("/")[5];
      return array;
    }
    catch(e){
        echo "error" + e;
    }
}


